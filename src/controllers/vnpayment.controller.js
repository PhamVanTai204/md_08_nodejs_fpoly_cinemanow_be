const { getIO } = require('../utils/socket');
//const vnpay = require('../config/vnpayConfig.js');
const { ProductCode, VnpLocale, dateFormat, consoleLogger, IpnFailChecksum,
    IpnOrderNotFound,
    IpnInvalidAmount,
    InpOrderAlreadyConfirmed,
    IpnUnknownError,
    IpnSuccess } = require('vnpay');
const { VNPay, ignoreLogger } = require('vnpay');
const Ticket = require('../models/ticket');
const Payment = require('../models/payment');
const vnpay = new VNPay({
    tmnCode: 'HKN8S09W', // M√£ TMN do VNPay c·∫•p
    secureSecret: 'X3K9G4X8MJR4XGHMNR6YVUNUYIFJ9CPA', // Chu·ªói b√≠ m·∫≠t b·∫£o m·∫≠t
    vnpayHost: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html', // ƒê·ªïi th√†nh production khi deploy
    testMode: true, // ƒê·ªÉ true khi test, false khi ch·∫°y th·∫≠t
    hashAlgorithm: 'SHA512',
    enableLog: true,
    loggerFn: console.log, // Ghi log ra console, c√≥ th·ªÉ d√πng ignoreLogger ƒë·ªÉ t·∫Øt log

    endpoints: {
        paymentEndpoint: 'paymentv2/vpcpay.html',
        queryDrRefundEndpoint: 'merchant_webapi/api/transaction',
        getBankListEndpoint: 'qrpayauth/api/merchant/get_bank_list',
    },
});


// API l·∫•y danh s√°ch ng√¢n h√†ng
exports.getBankList = async (req, res) => {
    try {
        const bankList = await vnpay.getBankList(); // G·ªçi API l·∫•y danh s√°ch ng√¢n h√†ng
        res.json(bankList); // Tr·∫£ v·ªÅ danh s√°ch ng√¢n h√†ng cho frontend
    } catch (error) {
        console.error('L·ªói l·∫•y danh s√°ch ng√¢n h√†ng:', error);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng√¢n h√†ng' });
    }
};

const tomorrow = new Date();
tomorrow.setDate(tomorrow.getDate() + 1);


exports.createPaymentUrl = async (req, res) => {
    try {
        // L·∫•y d·ªØ li·ªáu t·ª´ body c·ªßa request
        const { ticket_id, amount } = req.body;
        // Ki·ªÉm tra v√© t·ªìn t·∫°i v√† ch∆∞a thanh to√°n
        const ticket = await Ticket.findOne({
            _id: ticket_id,
            status: 'pending'
        });

        if (!ticket) {
            return res.status(400).json({
                success: false,
                message: 'Ticket not found or already processed'
            });
        }
        // T·∫°o payment_id duy nh·∫•t
        const payment_id = 'PAY' + Date.now();

        // T·∫°o payment record
        const payment = await Payment.create({
            payment_id,
            ticket_id: ticket._id,
            payment_method: 1, // 1 = VNPay
            status_order: 'pending'
        });
        const expireDate = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t h·∫øt h·∫°n
        const formattedExpireDate = dateFormat(expireDate, 'yyyyMMddHHmmss');

        // X√°c ƒë·ªãnh Return URL d·ª±a tr√™n User-Agent c·ªßa request
        let returnUrl = 'http://localhost:4200/confirmVNPay'; // Default for web

        // Ki·ªÉm tra User-Agent ƒë·ªÉ ph√°t hi·ªán mobile app
        const userAgent = req.headers['user-agent'] || '';
        if (userAgent.toLowerCase().includes('mobile') || req.query.platform === 'mobile') {
            // URL ·∫£o m√† app mobile c√≥ th·ªÉ x·ª≠ l√Ω, ho·∫∑c URL tr√™n web m√† webview mobile c√≥ th·ªÉ x·ª≠ l√Ω
            returnUrl = 'https://cinemanow.vn/payment-success';
            console.log('Detected mobile client, using mobile return URL');
        }

        console.log(`Using return URL: ${returnUrl} for user agent: ${userAgent.substring(0, 50)}...`);

        // T·∫°o URL thanh to√°n
        const paymentUrl = vnpay.buildPaymentUrl({
            vnp_Amount: amount,
            vnp_IpAddr:
                req.headers['x-forwarded-for'] ||
                req.connection.remoteAddress ||
                req.socket.remoteAddress ||
                req.ip,
            vnp_TxnRef: payment._id.toString(),
            vnp_OrderInfo: `Thanh toan ve xem phim #${ticket.ticket_id}`,
            vnp_OrderType: ProductCode.Other,
            vnp_ReturnUrl: returnUrl,
            vnp_Locale: VnpLocale.VN,
            vnp_ExpireDate: formattedExpireDate
        });

        return res.json({
            success: true,
            paymentUrl,
            payment: {
                payment,
                orderInfo: `Thanh toan ve xem phim #${ticket.ticket_id}`,
                returnUrl: returnUrl,
            }, // T·∫°o ƒë·ªëi t∆∞·ª£ng order ƒë·ªÉ tr·∫£ v·ªÅ
        });
    } catch (error) {
        return res.status(500).json({
            success: false,
            message: 'L·ªói khi t·∫°o URL thanh to√°n VNPAY',
            error: error.message,
        });
    }
};
exports.handleVNPayIpn = async (req, res) => {
    try {
        const verify = vnpay.verifyIpnCall(req.query);
        if (!verify.isVerified) {
            return res.json(IpnFailChecksum);
        }
        // L·∫•y payment t·ª´ database
        const payment = await Payment.findById(verify.vnp_TxnRef);
        if (!payment) {
            return res.json(IpnOrderNotFound);
        }
        // L·∫•y ticket t∆∞∆°ng ·ª©ng ƒë·ªÉ so s√°nh s·ªë ti·ªÅn
        const ticket = await Ticket.findById(payment.ticket_id);
        if (!ticket) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y v√©' });
        }
        // N·∫øu s·ªë ti·ªÅn thanh to√°n kh√¥ng kh·ªõp
        if (verify.vnp_Amount !== ticket.total_amount) {
            return res.json(IpnInvalidAmount);
        }
        // N·∫øu payment ƒë√£ completed tr∆∞·ªõc ƒë√≥
        if (payment.status_order === 'completed') {
            return res.json(InpOrderAlreadyConfirmed);
        }
        payment.vnp_TransactionNo = verify.vnp_TransactionNo;
        payment.vnp_ResponseCode = verify.vnp_ResponseCode;
        payment.vnp_BankCode = verify.vnp_BankCode;
        const payDateStr = verify.vnp_PayDate; // "20250424210435"
        let payDate = new Date(
            payDateStr.substring(0, 4),           // year
            parseInt(payDateStr.substring(4, 6)) - 1, // month (zero-based)
            payDateStr.substring(6, 8),           // day
            payDateStr.substring(8, 10),          // hour
            payDateStr.substring(10, 12),         // minute
            payDateStr.substring(12, 14)          // second
        );

        // üëâ Chuy·ªÉn sang gi·ªù VN b·∫±ng c√°ch c·ªông th√™m 7 gi·ªù
        payDate = new Date(payDate.getTime() + 7 * 60 * 60 * 1000);

        payment.vnp_PayDate = payDate;
        if (verify.isSuccess) {
            payment.status_order = 'completed';

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ticket
            await Ticket.findByIdAndUpdate(payment.ticket_id, {
                status: 'confirmed'
            });

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh 'booked'
            if (ticket.seats && ticket.seats.length > 0) {
                const Seat = require('../models/seat');

                // L·∫•y danh s√°ch ID gh·∫ø t·ª´ ticket
                const seatIds = ticket.seats.map(seat => seat.seat_id);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh 'booked'
                await Seat.updateMany(
                    { _id: { $in: seatIds } },
                    { $set: { seat_status: 'booked', selected_by: null, selection_time: null } }
                );

                console.log(`IPN: ƒê√£ c·∫≠p nh·∫≠t ${seatIds.length} gh·∫ø th√†nh 'booked'`);

                // Th√¥ng b√°o qua Pusher v·ªÅ vi·ªác c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
                const showtime = await require('../models/showTime').findById(ticket.showtime_id);

                if (showtime && showtime.room_id) {
                    // L·∫•y room_id t·ª´ showtime
                    const roomId = showtime.room_id;
                    const io = getIO();
                    // G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t nhi·ªÅu gh·∫ø qua Pusher
                    io.to(`room-${roomId}`).emit('seat-status-changed', {
                        type: 'multiple',
                        data: {
                            seat_ids: seatIds,
                            status: 'booked'
                        }
                    });

                    console.log(`IPN: ƒê√£ g·ª≠i th√¥ng b√°o Pusher ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø cho ph√≤ng ${roomId}`);
                }
            }
        } else {
            payment.status_order = 'failed';
        }


        /**
         * Sau khi x√°c th·ª±c ƒë∆°n h√†ng th√†nh c√¥ng,
         * b·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng trong c∆° s·ªü d·ªØ li·ªáu
         */
        await payment.save(); // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng, b·∫°n c·∫ßn t·ª± tri·ªÉn khai

        // Sau ƒë√≥ c·∫≠p nh·∫≠t tr·∫°ng th√°i tr·ªü l·∫°i cho VNPay ƒë·ªÉ h·ªç bi·∫øt b·∫°n ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng
        return res.json(IpnSuccess);
    } catch (error) {
        /**
         * X·ª≠ l√Ω c√°c ngo·∫°i l·ªá
         * V√≠ d·ª•: d·ªØ li·ªáu kh√¥ng ƒë·ªß, d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, l·ªói c·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu
         */
        console.log(`verify error: ${error}`);
        return res.json(IpnUnknownError);
    }
};
exports.verifyPayment = async (req, res) => {
    try {
        const verify = vnpay.verifyReturnUrl(req.query);
        if (!verify.isVerified) {
            return res.status(400).json({ success: false, message: 'Sai checksum' });
        }
        console.log("Verify result:", verify);


        const payment = await Payment.findById(verify.vnp_TxnRef);
        if (!payment) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n thanh to√°n' });
        }

        // L·∫•y ticket t∆∞∆°ng ·ª©ng ƒë·ªÉ so s√°nh s·ªë ti·ªÅn
        const ticket = await Ticket.findById(payment.ticket_id);
        if (!ticket) {
            return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y v√©' });
        }


        if (verify.vnp_Amount !== ticket.total_amount) {
            return res.status(400).json({ success: false, message: 'S·ªë ti·ªÅn kh√¥ng kh·ªõp v·ªõi ticket' });
        }

        // N·∫øu payment ƒë√£ completed tr∆∞·ªõc ƒë√≥
        if (payment.status_order === 'completed') {
            return res.json({ success: true, message: 'ƒê√£ x√°c nh·∫≠n thanh to√°n tr∆∞·ªõc ƒë√≥', status: 'completed' });
        }

        // X·ª≠ l√Ω c·∫≠p nh·∫≠t khi thanh to√°n th√†nh c√¥ng
        if (verify.vnp_ResponseCode === '00') {
            payment.status_order = 'completed';
            payment.vnp_TransactionNo = verify.vnp_TransactionNo;
            payment.vnp_BankCode = verify.vnp_BankCode;
            payment.vnp_CardType = verify.vnp_CardType;
            payment.vnp_PayDate = verify.vnp_PayDate;
            payment.vnp_ResponseCode = verify.vnp_ResponseCode;
            await payment.save();

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√©
            ticket.status = 'confirmed';
            await ticket.save();

            console.log("ƒêang c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø t·ª´ selecting th√†nh booked...");

            // L·∫•y danh s√°ch seat_ids t·ª´ ticket
            const seatIds = ticket.seats.map(seat => seat.seat_id);

            // L·∫•y room_id t·ª´ showtime v√¨ ticket kh√¥ng c√≥ tr·ª±c ti·∫øp room_id
            let roomId = null;
            try {
                const ShowTime = require('../models/showTime');
                const showtime = await ShowTime.findById(ticket.showtime_id);
                if (showtime) {
                    roomId = showtime.room_id;
                }
            } catch (err) {
                console.error("L·ªói khi l·∫•y th√¥ng tin showtime:", err);
            }

            if (!roomId) {
                console.error("Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c room_id t·ª´ showtime");
                return res.status(400).json({
                    success: false,
                    message: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gh·∫ø do thi·∫øu th√¥ng tin ph√≤ng'
                });
            }

            // G·ªçi h√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh "booked"
            try {
                const Seat = require('../models/seat');
                const pusher = require('../utils/pusher');

                // In ra log ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã seatIds l√† g√¨
                console.log("Th√¥ng tin seat_ids c·∫ßn c·∫≠p nh·∫≠t:", seatIds);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh "booked" d·ª±a tr√™n _id thay v√¨ seat_id
                const updateResult = await Seat.updateMany(
                    { _id: { $in: seatIds } },
                    { seat_status: 'booked', selected_by: null, selection_time: null }
                );

                console.log(`ƒê√£ c·∫≠p nh·∫≠t ${updateResult.modifiedCount} gh·∫ø th√†nh booked`);
                const io = getIO();
                // G·ª≠i th√¥ng b√°o qua Pusher v·ªÅ vi·ªác c·∫≠p nh·∫≠t gh·∫ø
                io.to(`room-${roomId}`).emit('seats-booked', {
                    seat_ids: seatIds,
                    status: 'booked'
                });
                
            } catch (updateError) {
                console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø:", updateError);
            }

            return res.json({
                success: true,
                message: 'Thanh to√°n th√†nh c√¥ng',
                status: 'completed',
                data: ticket
            });
        }

        // L∆∞u th√¥ng tin payment
        await payment.save();

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return res.json({
            success: true,
            message: 'Thanh to√°n th·∫•t b·∫°i',
            status: 'failed',
            payment: {
                id: payment._id,
                status_order: payment.status_order,
                payment_method: payment.payment_method,
                ticket_id: payment.ticket_id
            }
        });
    } catch (error) {
        console.error(`L·ªói khi x√°c th·ª±c thanh to√°n: ${error.message}`);
        return res.status(500).json({
            success: false,
            message: 'L·ªói server khi x√°c th·ª±c thanh to√°n',
            error: error.message
        });
    }
};

