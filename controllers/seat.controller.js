const Seat = require('../models/seat');
const Room = require('../models/room');
const createResponse = require('../utils/responseHelper');
const { updateRoomTotalSeats } = require('./room.controller');
const mongoose = require('mongoose');

// L·∫•y t·∫•t c·∫£ gh·∫ø
exports.getAllSeats = async (req, res) => {
    try {
        const seats = await Seat.find()
            .populate({
                path: 'room_id',
                populate: {
                    path: 'cinema_id'
                }
            });
        res.json(createResponse(200, null, seats));
    } catch (error) {
        console.error('Get all seats error:', error);
        res.status(500).json(createResponse(500, 'L·ªói khi l·∫•y danh s√°ch gh·∫ø', null));
    }
};

// L·∫•y gh·∫ø theo ID
exports.getSeatById = async (req, res) => {
    try {
        const seat = await Seat.findById(req.params.id)
            .populate({
                path: 'room_id',
                populate: {
                    path: 'cinema_id'
                }
            });

        if (!seat) {
            return res.status(404).json(createResponse(404, 'Kh√¥ng t√¨m th·∫•y gh·∫ø', null));
        }

        res.json(createResponse(200, null, seat));
    } catch (error) {
        console.error('Get seat by id error:', error);
        res.status(500).json(createResponse(500, 'L·ªói khi l·∫•y th√¥ng tin gh·∫ø', null));
    }
};

// T·∫°o gh·∫ø m·ªõi
exports.createSeat = async (req, res) => {
    try {
        const { seat_id, room_id, seat_status, seat_type, price_seat, column_of_seat, row_of_seat } = req.body;

        // Ki·ªÉm tra ƒë·∫ßy ƒë·ªß th√¥ng tin
        if (!seat_id || !room_id || !seat_type || !price_seat || !column_of_seat || !row_of_seat) {
            return res.status(400).json(createResponse(400, 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin', null));
        }

        // Ki·ªÉm tra seat_id ƒë√£ t·ªìn t·∫°i
        const existingSeat = await Seat.findOne({ seat_id });
        if (existingSeat) {
            return res.status(400).json(createResponse(400, 'M√£ gh·∫ø ƒë√£ t·ªìn t·∫°i', null));
        }

        // Ki·ªÉm tra ph√≤ng t·ªìn t·∫°i
        const room = await Room.findById(room_id);
        if (!room) {
            return res.status(404).json(createResponse(404, 'Kh√¥ng t√¨m th·∫•y ph√≤ng', null));
        }

        // Ki·ªÉm tra gh·∫ø ƒë√£ t·ªìn t·∫°i trong ph√≤ng v·ªõi v·ªã tr√≠ t∆∞∆°ng t·ª±
        const existingSeatPosition = await Seat.findOne({
            room_id,
            column_of_seat,
            row_of_seat
        });

        if (existingSeatPosition) {
            return res.status(400).json(createResponse(400, 'V·ªã tr√≠ gh·∫ø ƒë√£ t·ªìn t·∫°i trong ph√≤ng n√†y', null));
        }

        const newSeat = new Seat({
            seat_id,
            room_id,
            seat_status,
            seat_type,
            price_seat,
            column_of_seat,
            row_of_seat
        });

        const savedSeat = await newSeat.save();

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gh·∫ø c·ªßa ph√≤ng
        const totalSeats = await updateRoomTotalSeats(room_id);

        // Populate th√¥ng tin li√™n quan
        const populatedSeat = await Seat.findById(savedSeat._id)
            .populate({
                path: 'room_id',
                populate: {
                    path: 'cinema_id'
                }
            });

        res.status(201).json(createResponse(201, 'T·∫°o gh·∫ø th√†nh c√¥ng', {
            seat: populatedSeat,
            room_total_seats: totalSeats
        }));
    } catch (error) {
        console.error('Create seat error:', error);
        res.status(500).json(createResponse(500, 'L·ªói khi t·∫°o gh·∫ø', null));
    }
};

// C·∫≠p nh·∫≠t gh·∫ø
exports.updateSeatStatus = async (req, res) => {
    try {
        const { seat_status } = req.body;
        const id = req.params.id;

        // Ki·ªÉm tra xem tr·∫°ng th√°i c√≥ h·ª£p l·ªá kh√¥ng
        if (!['available', 'booked', 'unavailable'].includes(seat_status)) {
            return res.status(400).json(createResponse(400, "Tr·∫°ng th√°i gh·∫ø kh√¥ng h·ª£p l·ªá", null));
        }

        // Ki·ªÉm tra gh·∫ø t·ªìn t·∫°i
        const seat = await Seat.findById(id);
        if (!seat) {
            return res.status(404).json(createResponse(404, 'Kh√¥ng t√¨m th·∫•y gh·∫ø', null));
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
        seat.seat_status = seat_status;
        const updatedSeat = await seat.save();

        // Populate th√¥ng tin li√™n quan
        const populatedSeat = await Seat.findById(updatedSeat._id)
            .populate({
                path: 'room_id',
                populate: {
                    path: 'cinema_id'
                }
            });

        res.json(createResponse(200, 'C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø th√†nh c√¥ng', populatedSeat));
    } catch (error) {
        console.error('Update seat status error:', error);
        res.status(500).json(createResponse(500, 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø', null));
    }
};


// X√≥a gh·∫ø
exports.deleteSeat = async (req, res) => {
    try {
        const seat = await Seat.findById(req.params.id);
        if (!seat) {
            return res.status(404).json(createResponse(404, 'Kh√¥ng t√¨m th·∫•y gh·∫ø', null));
        }

        const roomId = seat.room_id;
        await Seat.deleteOne({ _id: req.params.id });

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gh·∫ø c·ªßa ph√≤ng
        const totalSeats = await updateRoomTotalSeats(roomId);

        res.json(createResponse(200, 'X√≥a gh·∫ø th√†nh c√¥ng', { room_total_seats: totalSeats }));
    } catch (error) {
        console.error('Delete seat error:', error);
        res.status(500).json(createResponse(500, 'L·ªói khi x√≥a gh·∫ø', null));
    }
};

exports.addMultipleSeats = async (req, res) => {
    const { room_id, rows, cols, seat_status, seat_type, price_seat } = req.body;

    if (!room_id || !rows || !cols || !seat_status || !seat_type || !price_seat) {
        return res.status(400).json(createResponse(400, "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc", null));
    }

    try {
        const room = await Room.findById(room_id);
        if (!room) {
            return res.status(404).json(createResponse(404, "Kh√¥ng t√¨m th·∫•y ph√≤ng", null));
        }

        let newSeats = [];
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                const seatId = `${String.fromCharCode(65 + i)}${j + 1}`;
                const column = j + 1;
                const row = String.fromCharCode(65 + i);

                newSeats.push({
                    seat_id: seatId,
                    room_id,
                    seat_status,
                    seat_type,
                    price_seat,
                    column_of_seat: column,
                    row_of_seat: row
                });
            }
        }

        // üîπ Ch·ªâ l·∫•y danh s√°ch gh·∫ø trong ph√≤ng hi·ªán t·∫°i
        const existingSeats = await Seat.find({ room_id });
        const existingSeatIds = new Set(existingSeats.map(s => s.seat_id));

        // üîπ L·ªçc b·ªè gh·∫ø n√†o ƒë√£ t·ªìn t·∫°i trong ph√≤ng tr∆∞·ªõc khi th√™m v√†o
        newSeats = newSeats.filter(seat => !existingSeatIds.has(seat.seat_id));

        if (newSeats.length === 0) {
            return res.status(400).json(createResponse(400, "T·∫•t c·∫£ c√°c gh·∫ø ƒë√£ t·ªìn t·∫°i trong ph√≤ng", null));
        }

        // Th√™m gh·∫ø m·ªõi v√†o database
        await Seat.insertMany(newSeats);
        res.status(201).json(createResponse(201, `Th√™m ${newSeats.length} gh·∫ø th√†nh c√¥ng`, null));

    } catch (error) {
        console.error("L·ªói khi th√™m gh·∫ø h√†ng lo·∫°t:", error);
        res.status(500).json(createResponse(500, "L·ªói khi th√™m gh·∫ø", error.message));
    }
};


exports.deleteMultipleSeats = async (req, res) => {
    const { room_id, seat_ids } = req.body;

    try {
        if (!room_id && (!seat_ids || seat_ids.length === 0)) {
            return res.status(400).json(createResponse(400, "C·∫ßn cung c·∫•p room_id ho·∫∑c danh s√°ch seat_ids", null));
        }

        let deleteResult;
        if (room_id) {
            // X√≥a t·∫•t c·∫£ gh·∫ø trong m·ªôt ph√≤ng
            deleteResult = await Seat.deleteMany({ room_id });
        } else if (seat_ids) {
            // X√≥a danh s√°ch gh·∫ø theo seat_id
            deleteResult = await Seat.deleteMany({ seat_id: { $in: seat_ids } });
        }

        if (deleteResult.deletedCount === 0) {
            return res.status(404).json(createResponse(404, "Kh√¥ng t√¨m th·∫•y gh·∫ø ƒë·ªÉ x√≥a", null));
        }

        res.json(createResponse(200, `X√≥a ${deleteResult.deletedCount} gh·∫ø th√†nh c√¥ng`, null));
    } catch (error) {
        console.error("Delete multiple seats error:", error);
        res.status(500).json(createResponse(500, "L·ªói khi x√≥a gh·∫ø", error.message));
    }
};
exports.updateMultipleSeatsStatus = async (req, res) => {
    const { seat_ids, room_id, seat_status } = req.body;

    try {
        if (!seat_status || (!seat_ids && !room_id)) {
            return res.status(400).json(createResponse(400, "C·∫ßn cung c·∫•p seat_status v√† seat_ids ho·∫∑c room_id", null));
        }

        if (!['available', 'booked', 'unavailable'].includes(seat_status)) {
            return res.status(400).json(createResponse(400, "Tr·∫°ng th√°i gh·∫ø kh√¥ng h·ª£p l·ªá", null));
        }

        let updateResult;
        if (room_id) {
            // C·∫≠p nh·∫≠t t·∫•t c·∫£ gh·∫ø trong m·ªôt ph√≤ng
            updateResult = await Seat.updateMany({ room_id }, { seat_status });
        } else if (seat_ids) {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i theo danh s√°ch seat_id
            updateResult = await Seat.updateMany({ seat_id: { $in: seat_ids } }, { seat_status });
        }

        if (updateResult.matchedCount === 0) {
            return res.status(404).json(createResponse(404, "Kh√¥ng t√¨m th·∫•y gh·∫ø ƒë·ªÉ c·∫≠p nh·∫≠t", null));
        }

        res.json(createResponse(200, `C·∫≠p nh·∫≠t tr·∫°ng th√°i cho ${updateResult.modifiedCount} gh·∫ø th√†nh c√¥ng`, null));
    } catch (error) {
        console.error("Update multiple seats status error:", error);
        res.status(500).json(createResponse(500, "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø", error.message));
    }
};

// Th√™m nhi·ªÅu gh·∫ø v√†o ph√≤ng
exports.createMultipleSeats = async (req, res) => {
    try {
        const { room_id, rows, columns, seat_types, prices } = req.body;

        // Ki·ªÉm tra room_id c√≥ t·ªìn t·∫°i
        const room = await Room.findById(room_id);
        if (!room) {
            return res.status(404).json({
                status: false,
                message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng',
                data: null
            });
        }

        // X√≥a t·∫•t c·∫£ gh·∫ø c≈© trong ph√≤ng (n·∫øu c√≥)
        await Seat.deleteMany({ room_id });

        const seats = [];
        const rowLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

        // T·∫°o gh·∫ø theo h√†ng v√† c·ªôt
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < columns; j++) {
                const rowLabel = rowLetters[i];
                const columnLabel = (j + 1).toString().padStart(2, '0');

                // X√°c ƒë·ªãnh lo·∫°i gh·∫ø v√† gi√° d·ª±a v√†o v·ªã tr√≠
                let seat_type = 'standard';
                let price = prices.standard || 50000;

                // Gh·∫ø VIP th∆∞·ªùng ·ªü gi·ªØa ph√≤ng
                if (i >= Math.floor(rows * 0.3) && i < Math.floor(rows * 0.7) &&
                    j >= Math.floor(columns * 0.3) && j < Math.floor(columns * 0.7)) {
                    seat_type = 'vip';
                    price = prices.vip || 70000;
                }

                // Gh·∫ø ƒë√¥i th∆∞·ªùng ·ªü cu·ªëi ph√≤ng
                if (i >= Math.floor(rows * 0.7) && j % 2 === 0 && j < columns - 1) {
                    seat_type = 'couple';
                    price = prices.couple || 120000;
                    // B·ªè qua gh·∫ø ti·∫øp theo v√¨ gh·∫ø ƒë√¥i chi·∫øm 2 v·ªã tr√≠
                    j++;
                }

                const seat = {
                    seat_id: `${room_id}-${rowLabel}${columnLabel}`,
                    room_id,
                    seat_status: 'available',
                    seat_type,
                    price_seat: price,
                    column_of_seat: columnLabel,
                    row_of_seat: rowLabel
                };

                seats.push(seat);
            }
        }

        // L∆∞u t·∫•t c·∫£ gh·∫ø v√†o database
        const createdSeats = await Seat.insertMany(seats);

        // C·∫≠p nh·∫≠t t·ªïng s·ªë gh·∫ø trong ph√≤ng
        room.total_seat = createdSeats.length;
        await room.save();

        res.status(201).json({
            status: true,
            message: 'T·∫°o gh·∫ø th√†nh c√¥ng',
            data: {
                total_seats: createdSeats.length,
                seats: createdSeats
            }
        });

    } catch (error) {
        console.error('Create seats error:', error);
        res.status(500).json({
            status: false,
            message: 'L·ªói khi t·∫°o gh·∫ø',
            data: null
        });
    }
};
